FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies for TA-Lib and other requirements
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    wget \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install TA-Lib binary first
RUN wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz && \
    tar -xzf ta-lib-0.4.0-src.tar.gz && \
    cd ta-lib && \
    ./configure --prefix=/usr && \
    make && \
    make install && \
    cd .. && \
    rm -rf ta-lib ta-lib-0.4.0-src.tar.gz

# Copy requirements
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install additional packages needed for enhanced signal generator
RUN pip install --no-cache-dir \
    ta-lib \
    scikit-learn \
    xgboost \
    joblib \
    mysql-connector-python \
    pandas \
    numpy \
    fastapi \
    uvicorn

# Copy enhanced signal generator and asset filter
COPY enhanced_signal_generator.py .
COPY coinbase_asset_filter.py .

# Copy model file if it exists (will fallback to simple mode if not found)
COPY full_dataset_gpu_xgboost_model_20250827_130225.joblib /app/full_dataset_gpu_xgboost_model_20250827_130225.joblib

# Clean up any potential corruption
RUN sed -i 's/)TEST_MARKER_12345/)/g' signal_coherence_manager.py

# Create automated runner script
RUN echo '#!/bin/bash\n\
echo "Enhanced Signal Generator Container Started"\n\
echo "Model file: $(ls -la full_dataset_gpu_xgboost_model_20250827_130225.joblib)"\n\
\n\
while true; do\n\
    echo "$(date): Starting enhanced signal generation with 120-feature engineering..."\n\
    python enhanced_signal_generator.py\n\
    if [ $? -eq 0 ]; then\n\
        echo "$(date): Enhanced signal generation completed successfully"\n\
    else\n\
        echo "$(date): Enhanced signal generation failed"\n\
    fi\n\
    echo "$(date): Sleeping for ${SIGNAL_INTERVAL_MINUTES:-5} minutes..."\n\
    sleep $((${SIGNAL_INTERVAL_MINUTES:-5} * 60))\n\
done' > /app/run_enhanced_signals.sh && chmod +x /app/run_enhanced_signals.sh

# Create healthcheck script using HTTP endpoint
RUN echo '#!/bin/bash\n\
# Check if the enhanced signal generator HTTP endpoint is responding\n\
if curl -f -s http://localhost:8025/health > /dev/null; then\n\
    echo "Enhanced signal generator HTTP endpoint is healthy"\n\
    exit 0\n\
else\n\
    echo "Enhanced signal generator HTTP endpoint not responding"\n\
    exit 1\n\
fi' > /app/healthcheck.sh && chmod +x /app/healthcheck.sh

# Set user
RUN useradd -r -s /bin/false signaler && \
    chown -R signaler:signaler /app

USER signaler

# Health check
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
    CMD /app/healthcheck.sh

# Run the enhanced signal generator directly
CMD ["python", "enhanced_signal_generator.py"]
