# =============================================================================
# HEALTH MONITOR - Ensures all services remain up and healthy
# =============================================================================

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-monitor
  namespace: crypto-trading
  labels:
    app: health-monitor
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: health-monitor
  template:
    metadata:
      labels:
        app: health-monitor
        component: monitoring
    spec:
      containers:
      - name: health-monitor
        image: python:3.11-slim
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
          name: http
        command: ["/bin/bash"]
        args:
        - -c
        - |
          # Install dependencies
          pip install fastapi uvicorn requests
          
          # Start the health monitor service
          python -c "
          import os
          import time
          import logging
          import requests
          from datetime import datetime
          from fastapi import FastAPI
          import uvicorn
          
          # Configure logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s'
          )
          logger = logging.getLogger(__name__)
          
          # FastAPI app
          app = FastAPI(title='Health Monitor')
          
          # Service endpoints to monitor
          SERVICES = {
              'signal-generator': 'http://signal-generator:8025/health',
              'signal-bridge': 'http://signal-bridge:8022/health',
              'trade-executor': 'http://trade-executor:8024/health',
              'trade-orchestrator': 'http://trade-orchestrator:8023/health'
          }
          
          def check_service_health(service_name, url):
              try:
                  response = requests.get(url, timeout=5)
                  if response.status_code == 200:
                      data = response.json()
                      return {
                          'status': 'healthy',
                          'service': service_name,
                          'response': data,
                          'timestamp': datetime.now().isoformat()
                      }
                  else:
                      return {
                          'status': 'unhealthy',
                          'service': service_name,
                          'error': f'HTTP {response.status_code}',
                          'timestamp': datetime.now().isoformat()
                      }
              except Exception as e:
                  return {
                      'status': 'unhealthy',
                      'service': service_name,
                      'error': str(e),
                      'timestamp': datetime.now().isoformat()
                  }
          
          def check_all_services():
              results = {}
              for service_name, url in SERVICES.items():
                  results[service_name] = check_service_health(service_name, url)
              return results
          
          @app.get('/health')
          def health_check():
              return {
                  'status': 'healthy',
                  'service': 'health_monitor',
                  'timestamp': datetime.now().isoformat()
              }
          
          @app.get('/status')
          def get_status():
              return check_all_services()
          
          @app.get('/status/{service_name}')
          def get_service_status(service_name: str):
              if service_name not in SERVICES:
                  return {'error': f'Service {service_name} not found'}
              return check_service_health(service_name, SERVICES[service_name])
          
          def health_monitoring_worker():
              logger.info('Starting health monitoring worker...')
              while True:
                  try:
                      results = check_all_services()
                      unhealthy_services = [name for name, result in results.items() if result['status'] == 'unhealthy']
                      
                      if unhealthy_services:
                          logger.warning(f'⚠️ Unhealthy services detected: {unhealthy_services}')
                          for service in unhealthy_services:
                              logger.warning(f'❌ {service}: {results[service].get(\"error\", \"Unknown error\")}')
                      else:
                          logger.info('✅ All services are healthy')
                      
                      time.sleep(60)  # Check every minute
                  except Exception as e:
                      logger.error(f'Error in health monitoring worker: {e}')
                      time.sleep(60)
          
          @app.on_event('startup')
          async def startup_event():
              import threading
              worker_thread = threading.Thread(target=health_monitoring_worker, daemon=True)
              worker_thread.start()
              logger.info('Health Monitor started')
          
          if __name__ == '__main__':
              uvicorn.run(app, host='0.0.0.0', port=8080)
          "
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: health-monitor
  namespace: crypto-trading
  labels:
    app: health-monitor
spec:
  selector:
    app: health-monitor
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
