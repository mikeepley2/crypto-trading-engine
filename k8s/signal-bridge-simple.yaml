apiVersion: apps/v1
kind: Deployment
metadata:
  name: signal-bridge-simple
  namespace: crypto-trading
  labels:
    app: signal-bridge-simple
    component: signal-processing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: signal-bridge-simple
  template:
    metadata:
      labels:
        app: signal-bridge-simple
        component: signal-processing
    spec:
      containers:
      - name: signal-bridge-simple
        image: python:3.11-slim
        imagePullPolicy: Never
        ports:
        - containerPort: 8022
          name: http
        command: ["/bin/bash"]
        args:
        - -c
        - |
          # Create app directory
          mkdir -p /app
          
          # Install dependencies
          pip install fastapi uvicorn mysql-connector-python requests numpy pandas
          
          # Create the signal bridge service
          cat > /app/signal_bridge.py << 'EOF'
          #!/usr/bin/env python3
          """
          Simple Signal Processing Bridge
          Converts trading signals to trade recommendations
          """
          
          import os
          import time
          import logging
          import mysql.connector
          from datetime import datetime, timedelta
          from fastapi import FastAPI
          import uvicorn
          
          # Configure logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s'
          )
          logger = logging.getLogger(__name__)
          
          # FastAPI app
          app = FastAPI(title="Signal Processing Bridge")
          
          @app.get("/health")
          def health_check():
              return {
                  "status": "healthy",
                  "service": "signal_bridge",
                  "timestamp": datetime.now().isoformat()
              }
          
          def get_db_connection():
              """Get database connection"""
              try:
                  conn = mysql.connector.connect(
                      host=os.getenv('DB_HOST', '172.22.32.1'),
                      user=os.getenv('DB_USER', 'news_collector'),
                      password=os.getenv('DB_PASSWORD'),
                      database=os.getenv('DB_NAME_PRICES', 'crypto_prices')
                  )
                  return conn
              except Exception as e:
                  logger.error(f"Database connection failed: {e}")
                  return None
          
          def process_signals_to_recommendations():
              """Convert unprocessed signals to recommendations"""
              conn = get_db_connection()
              if not conn:
                  return
              
              try:
                  cursor = conn.cursor()
                  
                  # Get unprocessed signals from the last hour
                  query = """
                      SELECT id, symbol, signal_type, price, confidence, prediction, timestamp
                      FROM trading_signals 
                      WHERE timestamp >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
                      AND signal_type IN ('BUY', 'SELL')
                      AND confidence > 0.6
                      AND id NOT IN (
                          SELECT DISTINCT signal_id 
                          FROM trade_recommendations 
                          WHERE signal_id IS NOT NULL
                      )
                      ORDER BY confidence DESC
                      LIMIT 10
                  """
                  
                  cursor.execute(query)
                  signals = cursor.fetchall()
                  
                  if signals:
                      logger.info(f"Processing {len(signals)} signals to recommendations")
                      
                      for signal in signals:
                          signal_id, symbol, signal_type, price, confidence, prediction, timestamp = signal
                          
                          # Create recommendation
                          amount_usd = 100.0  # Default amount
                          reasoning = f"ML signal with {confidence:.3f} confidence"
                          
                          insert_query = """
                              INSERT INTO trade_recommendations (
                                  signal_id, symbol, signal_type, amount_usd, confidence, 
                                  reasoning, execution_status, entry_price, is_mock
                              ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                          """
                          
                          values = (
                              signal_id, symbol, signal_type, amount_usd, confidence,
                              reasoning, 'PENDING', price, 0
                          )
                          
                          cursor.execute(insert_query, values)
                          logger.info(f"Created recommendation for {symbol} {signal_type} (confidence: {confidence:.3f})")
                      
                      conn.commit()
                      logger.info(f"Successfully created {len(signals)} recommendations")
                  else:
                      logger.info("No new signals to process")
                  
              except Exception as e:
                  logger.error(f"Error processing signals: {e}")
              finally:
                  if conn:
                      conn.close()
          
          def signal_processing_worker():
              """Background worker to process signals"""
              logger.info("Starting signal processing worker...")
              while True:
                  try:
                      process_signals_to_recommendations()
                      time.sleep(30)  # Process every 30 seconds
                  except Exception as e:
                      logger.error(f"Signal processing worker error: {e}")
                      time.sleep(60)  # Wait longer on error
          
          @app.on_event("startup")
          async def startup_event():
              """Start the signal processing worker"""
              import threading
              worker_thread = threading.Thread(target=signal_processing_worker, daemon=True)
              worker_thread.start()
              logger.info("Signal Processing Bridge started")
          
          if __name__ == "__main__":
              uvicorn.run(app, host="0.0.0.0", port=8022)
          EOF
          
          # Start the service
          python /app/signal_bridge.py
        envFrom:
        - configMapRef:
            name: trade-exec-coinbase-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trade-exec-coinbase-secrets
              key: DB_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8022
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8022
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: signal-bridge-simple
  namespace: crypto-trading
  labels:
    app: signal-bridge-simple
spec:
  selector:
    app: signal-bridge-simple
  ports:
    - protocol: TCP
      port: 8022
      targetPort: 8022
  type: ClusterIP
