apiVersion: v1
kind: ConfigMap
metadata:
  name: ollama-config
  namespace: crypto-trading
data:
  OLLAMA_HOST: "0.0.0.0"
  OLLAMA_PORT: "11434"
  OLLAMA_DEFAULT_MODEL: "llama2:7b"
  SERVICE_PORT: "8050"
  OLLAMA_URL: "http://ollama:11434"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ollama-models-storage
  namespace: crypto-trading
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi  # Sufficient for multiple models
  storageClassName: standard  # Adjust based on your cluster

---
# Ollama Core Service - LLM Runtime
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
  namespace: crypto-trading
  labels:
    app: ollama
    component: llm-runtime
spec:
  replicas: 1
  strategy:
    type: Recreate  # Only one replica can use PVC
  selector:
    matchLabels:
      app: ollama
  template:
    metadata:
      labels:
        app: ollama
        component: llm-runtime
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: http
        env:
        - name: OLLAMA_HOST
          valueFrom:
            configMapKeyRef:
              name: ollama-config
              key: OLLAMA_HOST
        - name: OLLAMA_PORT
          valueFrom:
            configMapKeyRef:
              name: ollama-config
              key: OLLAMA_PORT
        volumeMounts:
        - name: ollama-models
          mountPath: /root/.ollama
        resources:
          requests:
            memory: "8Gi"
            cpu: "2000m"
          limits:
            memory: "24Gi"  # Increased for multiple model inference
            cpu: "6000m"
        livenessProbe:
          httpGet:
            path: /
            port: 11434
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
      volumes:
      - name: ollama-models
        persistentVolumeClaim:
          claimName: ollama-models-storage
      # Add node affinity for GPU nodes if available
      # nodeSelector:
      #   accelerator: nvidia-tesla-t4

---
apiVersion: v1
kind: Service
metadata:
  name: ollama
  namespace: crypto-trading
  labels:
    app: ollama
spec:
  selector:
    app: ollama
  ports:
  - name: http
    port: 11434
    targetPort: 11434
  type: ClusterIP

---
# Ollama LLM Service - FastAPI Wrapper
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-llm-service
  namespace: crypto-trading
  labels:
    app: ollama-llm-service
    component: llm-api
spec:
  replicas: 1  # Single replica during troubleshooting
  selector:
    matchLabels:
      app: ollama-llm-service
  template:
    metadata:
      labels:
        app: ollama-llm-service
        component: llm-api
    spec:
      containers:
      - name: ollama-llm-service
        image: ollama-llm-service:latest
        imagePullPolicy: Never  # Use locally built image
        ports:
        - containerPort: 8050
          name: http
        env:
        - name: OLLAMA_HOST
          value: "ollama"  # Reference to Ollama service
        - name: OLLAMA_PORT
          valueFrom:
            configMapKeyRef:
              name: ollama-config
              key: OLLAMA_PORT
        - name: OLLAMA_DEFAULT_MODEL
          valueFrom:
            configMapKeyRef:
              name: ollama-config
              key: OLLAMA_DEFAULT_MODEL
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: ollama-config
              key: SERVICE_PORT
        - name: PYTHONPATH
          value: "/app"
        - name: PYTHONUNBUFFERED
          value: "1"
        volumeMounts:
        - name: logs
          mountPath: /app/temp/logs
        - name: cache
          mountPath: /app/temp/cache
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8050
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8050
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8050
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 6
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
      # Wait for Ollama to be ready
      initContainers:
      - name: wait-for-ollama
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for Ollama to be ready..."
          until nc -z ollama 11434; do
            echo "Ollama not ready, sleeping 5s..."
            sleep 5
          done
          echo "Ollama is ready!"

---
apiVersion: v1
kind: Service
metadata:
  name: ollama-llm-service
  namespace: crypto-trading
  labels:
    app: ollama-llm-service
spec:
  selector:
    app: ollama-llm-service
  ports:
  - name: http
    port: 8050
    targetPort: 8050
  type: ClusterIP

---
# Optional: NodePort for external access during development
apiVersion: v1
kind: Service
metadata:
  name: ollama-llm-service-nodeport
  namespace: crypto-trading
  labels:
    app: ollama-llm-service
spec:
  selector:
    app: ollama-llm-service
  ports:
  - name: http
    port: 8050
    targetPort: 8050
    nodePort: 30050
  type: NodePort

---
# Model Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: ollama-model-init
  namespace: crypto-trading
  labels:
    app: ollama
    component: model-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: model-init
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Waiting for Ollama to be ready..."
          until curl -f http://ollama:11434/; do
            echo "Ollama not ready, sleeping 10s..."
            sleep 10
          done
          
          echo "Pulling default models..."
          
          # Pull LLaMA 2 7B (primary model)
          echo "Pulling llama2:7b..."
          curl -X POST http://ollama:11434/api/pull \
            -H "Content-Type: application/json" \
            -d '{"name": "llama2:7b"}' || echo "Failed to pull llama2:7b"
          
          # Pull Mistral 7B (efficient alternative)
          echo "Pulling mistral:7b..."
          curl -X POST http://ollama:11434/api/pull \
            -H "Content-Type: application/json" \
            -d '{"name": "mistral:7b"}' || echo "Failed to pull mistral:7b"
          
          echo "Model initialization complete!"
          
          # List available models
          echo "Available models:"
          curl -s http://ollama:11434/api/tags | grep -o '"name":"[^"]*"' || echo "Could not list models"
          
      # Allow job to run for up to 30 minutes (model downloads)
      activeDeadlineSeconds: 1800

---
# Horizontal Pod Autoscaler for the API service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ollama-llm-service-hpa
  namespace: crypto-trading
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ollama-llm-service
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60