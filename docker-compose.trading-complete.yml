version: '3.8'
#
# LIVE AUTOMATED CRYPTOCURRENCY TRADING SYSTEM
#
services:
  # Redis: Real-Time Signal Streaming Infrastructure
  # Provides pub-sub messaging for sub-second signal delivery
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - trading-network

  # Enhanced Signal Bridge: Real-Time Trading Intelligence with Redis Streaming
  # Combines Redis real-time streaming with database fallback for optimal performance
  # Connects to K8s signal generation services via database and external service URLs
  enhanced-signal-bridge:
    build:
      context: backend/services/trading/signal-streaming
      dockerfile: Dockerfile
    container_name: crypto-enhanced-signal-bridge
    ports:
      - "8022:8022"  # Enhanced bridge service
    environment:
      # Database Configuration
      - DATABASE_HOST=192.168.230.163
      - DATABASE_USER=news_collector
      - DATABASE_PASSWORD=99Rules!
      - SIGNALS_DATABASE=crypto_prices
      - TRADES_DATABASE=crypto_transactions
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_ENABLED=true
      
      # Trading Configuration  
      - TRADE_EXECUTION_URL=http://host.docker.internal:8024
      - FALLBACK_INTERVAL_SECONDS=60  # Database fallback every minute
      - MAX_SIGNAL_AGE_MINUTES=120    # Process signals up to 2 hours old
      
      # Risk Management
      - MAX_POSITION_SIZE_USD=500
      - MAX_DAILY_TRADES=300
      - BALANCE_UTILIZATION_PERCENT=95
      - MIN_TRADE_SIZE_USD=5.00
      - MIN_COINBASE_TRADE_AMOUNT=1.00
      - MIN_POSITION_VALUE_USD=15.00
      
      # K8s Service Integration (signals generated by K8s services)
      - KUBERNETES_SIGNAL_SERVICES=true
      - SIGNAL_DATABASE_ONLY=true  # Get signals from database only (K8s writes to DB)
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8022/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - trading-network

  # Signal Generation Services (MIGRATED TO KUBERNETES)
  # Enhanced Signal Generator and related ML services now run in K8s crypto-trading namespace:
  # - signal-gen-orchestrator: Main signal generation coordinator
  # - signal-gen-ml-engine: XGBoost ML model processing  
  # - signal-gen-feature-engine: Feature engineering and data preparation
  # - signal-gen-analytics: Signal analysis and validation
  # - signal-gen-market-context: Market context analysis
  # - signal-gen-portfolio: Portfolio optimization
  # - signal-gen-risk-mgmt: Risk management analysis
  #
  # To view K8s signal generation services:
  #   kubectl get pods -n crypto-trading
  # 
  # Signal generation now occurs in K8s with enhanced scalability and monitoring

  # Live Trade Execution: Coinbase Advanced Trade API Integration  
  # Executes BUY/SELL orders with real money via Coinbase API
  trade-execution-engine:
    build:
      context: backend/services/trading/trade-execution-engine
      dockerfile: Dockerfile
    container_name: aicryptotrading-engines-trade-execution
    ports:
      - "8024:8024"
    env_file:
      - config.env
    environment:
      # Database Configuration - using host.docker.internal since other services work fine
      - DB_HOST=host.docker.internal
      - DB_USER=news_collector
      - DB_PASSWORD=99Rules!
      - DB_NAME_TRANSACTIONS=crypto_transactions
      - DB_NAME_PRICES=crypto_prices
      
      # Trading Mode (MOCK for safe testing, LIVE for real money trading)
      - EXECUTION_MODE=live
      - COINBASE_API_MODE=live
      - TRADE_EXECUTION_ENABLED=true
      
      # Risk Management Settings
      - MAX_POSITION_SIZE_USD=500.0
      - MAX_DAILY_TRADES=300
      - MAX_DAILY_LOSS_USD=500.0
      - BALANCE_UTILIZATION=0.95
      
      # API Configuration  
      - COINBASE_API_KEY=organizations/5f04b9a1-3467-4f94-bb5c-2769d89fe5d6/apiKeys/996f9a7a-3b71-46fb-9951-6fac9c186836
      - "COINBASE_PRIVATE_KEY=-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIOeCWqujZ+0nNkJQwXsx9UGyNwwgWM9jV+sC35V2jOc0oAoGCCqGSM49\nAwEHoUQDQgAEdGRWA8fDHryh4KAlovasl8eg6l/cNxbEiN/Wl9bdDPFY/ZLHexIG\nCkppK6pngv7uGAp+RomWgF1pGsITa5Trvw==\n-----END EC PRIVATE KEY-----"
      - COINBASE_BASE_URL=https://api.coinbase.com
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8024/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Automated Live Trader: Processes trade recommendations and executes them
  # Continuously monitors for fresh trade recommendations and executes them via trade execution engine  
  automated-live-trader:
    build:
      context: backend/services/trading
      dockerfile: Dockerfile.automated-trader
    container_name: crypto-automated-live-trader
    ports:
      - "8023:8023"
    environment:
      - RECOMMENDATION_SERVICE_URL=http://enhanced-signal-bridge:8022
      - EXECUTION_SERVICE_URL=http://trade-execution-engine:8024
      - MAX_AGE_HOURS=1
      - CHECK_INTERVAL=30
      - MAX_TRADES_PER_CYCLE=3
    depends_on:
      - enhanced-signal-bridge
      - trade-execution-engine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8023/health"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - trading-network

  # =========================================================================
  # DATA PIPELINE - Real-time Data Collection and Processing
  # =========================================================================

  # Data Collection Manager: Orchestrates price and market data collection
  # NOTE: This service has been migrated to Kubernetes (collector-manager)
  # For K8s deployment, use: kubectl apply -f k8s/collectors/collector-manager.yaml
  # collector-manager:
  #   build:
  #     context: backend/collectors/base
  #     dockerfile: Dockerfile.collector-manager
  #   container_name: crypto-collector-manager
  #   ports:
  #     - "8000:8000"  # Collection orchestration
  #   environment:
  #     - DATABASE_HOST=host.docker.internal
  #     - DATABASE_USER=news_collector
  #     - DATABASE_PASSWORD=99Rules!
  #     - COLLECTION_INTERVAL_MINUTES=15
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: unless-stopped
  #   networks:
  #     - trading-network

  # Crypto Prices Service: Real-time cryptocurrency price collection
  # NOTE: This service has been migrated to Kubernetes (crypto-prices)
  # For K8s deployment, use: kubectl apply -f k8s/collectors/crypto-prices.yaml
  # crypto-prices:
  #   build:
  #     context: backend/collectors/crypto_prices
  #     dockerfile: Dockerfile
  #   container_name: crypto-crypto-prices
  #   ports:
  #     - "8001:8000"  # Price collection service (external:internal)
  #   environment:
  #     - DATABASE_HOST=host.docker.internal
  #     - DATABASE_USER=news_collector
  #     - DATABASE_PASSWORD=99Rules!
  #     - DATABASE_NAME=crypto_prices
  #     - COINGECKO_API_ENABLED=true
  #   depends_on:
  #     - collector-manager
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: unless-stopped
  #   networks:
  #     - trading-network

  # ML Features Updater: Maintains ml_features_materialized table (1.4M records)
  # NOTE: This service has been migrated to Kubernetes (realtime-materialized-updater)
  # For K8s deployment, use: kubectl apply -f k8s/collectors/materialized-updater.yaml
  # realtime-materialized-updater:
  #   build:
  #     context: backend/services/ml/realtime_materialized_updater
  #     dockerfile: Dockerfile
  #   container_name: realtime-materialized-updater
  #   ports:
  #     - "8020:8000"  # ML features updater
  #   environment:
  #     - DATABASE_HOST=host.docker.internal
  #     - DATABASE_USER=news_collector
  #     - DATABASE_PASSWORD=99Rules!
  #     - DATABASE_NAME=crypto_prices
  #     - UPDATE_INTERVAL_MINUTES=60
  #     - FEATURES_TABLE=ml_features_materialized
  #   depends_on:
  #     - crypto-prices
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s
  #   restart: unless-stopped
  #   networks:
  #     - trading-network

  # ML Performance Feedback Service: Trade Outcome Analysis and Model Optimization
  # Analyzes trade outcomes and provides feedback for model optimization
  # Connects to K8s signal generation services for model feedback
  ml-performance-feedback:
    build:
      context: backend/services/trading/ml-feedback
      dockerfile: Dockerfile
    container_name: crypto-ml-performance-feedback
    ports:
      - "8035:8035"  # ML feedback service
    environment:
      # Database Configuration
      - DATABASE_HOST=host.docker.internal
      - DATABASE_USER=news_collector
      - DATABASE_PASSWORD=99Rules!
      - TRADES_DATABASE=crypto_transactions
      - SIGNALS_DATABASE=crypto_prices
      
      # Analysis Configuration
      - ANALYSIS_INTERVAL_MINUTES=30      # Analyze performance every 30 minutes
      - MIN_TRADES_FOR_ANALYSIS=10        # Minimum trades needed for analysis
      - LOOKBACK_DAYS=30                  # Analyze last 30 days of trades
      
      # K8s Signal Generation Service Integration
      - KUBERNETES_SIGNAL_SERVICES=true   # Signal generation in K8s
      - SIGNAL_FEEDBACK_DATABASE_ONLY=true # Provide feedback via database only
      - SIGNAL_ORCHESTRATOR_SERVICE=signal-gen-orchestrator.crypto-trading.svc.cluster.local
    depends_on:
      - trade-execution-engine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8035/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s  # Allow time for initial analysis
    restart: unless-stopped
    networks:
      - trading-network

  # =========================================================================
  # MONITORING AND DASHBOARD
  # =========================================================================

  # Unified Trading Dashboard: Real-time portfolio and P&L monitoring
  unified-dashboard:
    build:
      context: backend/services/monitoring/dashboard
      dockerfile: Dockerfile.unified-monitoring
    container_name: crypto-unified-dashboard
    ports:
      - "8094:8094"  # Trading performance dashboard
    environment:
      - DATABASE_HOST=host.docker.internal
      - DATABASE_USER=news_collector
      - DATABASE_PASSWORD=99Rules!
      - CRYPTO_PRICES_DB=crypto_prices
      - CRYPTO_TRANSACTIONS_DB=crypto_transactions
      - TRADE_EXECUTION_URL=http://host.docker.internal:8024
    depends_on:
      - trade-execution-engine
      - enhanced-signal-bridge
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8094/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - trading-network

# =========================================================================
# NETWORK AND VOLUME CONFIGURATION
# =========================================================================

networks:
  trading-network:
    driver: bridge
    name: crypto-trading-network

volumes:
  # Persistent storage for trading data and ML models
  trading-data:
    driver: local
  ml-models:
    driver: local
  redis-data:
    driver: local

# =========================================================================
# DEPLOYMENT NOTES
# =========================================================================
#
# ARCHITECTURE OVERVIEW:
# This docker-compose file contains core trading infrastructure services.
# Signal generation services are deployed separately in Kubernetes for scalability.
#
# Kubernetes Services (crypto-trading namespace):
# - signal-gen-orchestrator: Main signal generation coordinator
# - signal-gen-ml-engine: XGBoost ML model processing  
# - signal-gen-feature-engine: Feature engineering and data preparation
# - signal-gen-analytics: Signal analysis and validation
# - signal-gen-market-context: Market context analysis
# - signal-gen-portfolio: Portfolio optimization
# - signal-gen-risk-mgmt: Risk management analysis
#
# Docker Compose Services (this file):
# - Redis: Real-time signal streaming infrastructure
# - Enhanced Signal Bridge: Consumes K8s-generated signals for trading
# - Trade Execution Engine: Live Coinbase API trading
# - ML Performance Feedback: Model optimization feedback
# - Unified Dashboard: Portfolio monitoring
#
# Prerequisites:
# 1. Kubernetes cluster with signal generation services deployed
# 2. MySQL running on host with crypto_prices and crypto_transactions databases
# 3. Coinbase API credentials configured in config.env
#
# Start Trading Infrastructure:
#   docker-compose -f docker-compose.trading-complete.yml up -d
#
# Monitor System:
#   docker ps | grep crypto-
#   kubectl get pods -n crypto-trading  # Signal generation services
#   curl http://localhost:8094  # Trading dashboard
#   curl http://localhost:8024/portfolio  # Current portfolio
#
# Current Performance:
#   Portfolio Value: $2,571.86 (3,784% growth from $66.03)
#   Active Position: 371.55 ADA ($342.33)
#   Daily Trades: 220+ executed from 869 recommendations
#   Risk Controls: $500/day, $100/trade limits active
#
# =========================================================================
